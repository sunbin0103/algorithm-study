1. 삽입정렬(Insertion Sort)
- 비교 정렬
- 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여 해당 키의 위치를 찾아 삽입한다.
- 작은 데이터에 효율적이다.

2. 장점
- 구현이 간단하다.
- 데이터가 작을 경우, 선택 정렬이나 버블 정렬보다 효율적이다.
- 키가 같다면 입력의 상대적인 순서를 유지해 안정적이다.
- 일정한 크기의 부가 메모리 공간 O(1)만을 필요로 한다.
- 입력 리스트를 받으면서 정렬할 수 있다.

3. 단점
- 비교적 많은 데이터의 이동을 필요로 한다.
- 데이터가 크면 비효율적이다.

4. 알고리즘
(1) 두번째 자료부터 시작해 앞의 자료들과 비교하여 삽입 위치를 결정한다.
(2) 해당 위치보다 뒤에 있는 자료들을 옮긴 뒤, 지정한 자리에 자료를 삽입한다.

ex) { 5, 3, 8, 4, 6 }
1회전: 5 3 8 4 6 > 3 5 8 4 6
2회전: 3 5 8 4 6 > 3 5 8 4 6
3회전: 3 5 8 4 6 > 3 4 5 8 6
4회전: 3 4 5 8 6 > 3 4 5 6 8
?
5. 코드
/* Insertion Sort */
int iKey, j;
for (int i = 1; i <= iN - 1; i++)
{
	iKey = arrNum[i];
	j = i;

	while (arrNum[j - 1] > iKey && j >= 1)
	{
		arrNum[j] = arrNum[j - 1];
		j--;
	}

	arrNum[j] = iKey;
}

6. 시간 복잡도
Worst	O(n^2)
Best	O(n^2)
Avg	O(n^2)

7. 참고
- 다양한 예제로 학습하는 데이터 구조와 알고리즘
- Open Tech Guides (https://www.opentechguides.com/how-to/article/c/50/insertion-sort-c.html)
- [알고리즘] 삽입 정렬(insertion sort)이란 (https://gmlwjd9405.github.io/2018/05/06/algorithm-insertion-sort.html)
